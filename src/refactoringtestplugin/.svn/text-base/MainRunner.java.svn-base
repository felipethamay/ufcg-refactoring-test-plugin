package refactoringtestplugin;

import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedList;

import org.eclipse.core.runtime.IPlatformRunnable;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.application.WorkbenchAdvisor;
import org.eclipse.ui.testing.ITestHarness;
import org.eclipse.ui.testing.TestableObject;

public class MainRunner implements IPlatformRunnable, ITestHarness {
	
	private Collection<? extends RefactoringTest> suite() {
		return Arrays.asList(
				
				
//				new refactoringtestplugin.renamemethod.Demo(),
//				new refactoringtestplugin.renamemethod.SingleClassMethodReference()

				);
	}

	private TestableObject testableObject;
	private String[] args;

	public Object run(Object args) throws Exception {
		this.args = (String[])args;
		testableObject = PlatformUI.getTestableObject();
		testableObject.setTestHarness(this);			
		
		Display display = PlatformUI.createDisplay();
		try {
			PlatformUI.createAndRunWorkbench(display, new NullAdvisor());
			return IPlatformRunnable.EXIT_OK;
		} 
		finally {
			display.dispose();
		}	    
	}

	public void runTests() {
		testableObject.testingStarting();
		testableObject.runTest(new Runnable() {
			public void run() {
				try {
					for (RefactoringTest test : parseArgs(args)) {
						test.runTests();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		testableObject.testingFinished();
	}
	
	private Collection<RefactoringTest> parseArgs(String[] args) {
		Collection<RefactoringTest> testsToRun = new LinkedList<RefactoringTest>();
		boolean expectClasses = true;
		RefactoringTest testObject;
		for (String arg : args) {
			if (!arg.startsWith("-")) {				
				testObject = instantiateTestObject(arg);
				if (testObject != null) {
					testsToRun.add(testObject);
				}
			}
			else if (arg.equals("-list")) {
				expectClasses = false;
				printSuite();
			}
			else if (arg.equals("-runall")) {
				testsToRun.addAll(suite());
			}
			else if (arg.equals("-help") || arg.equals("--help") || arg.equals("-h")) {
				expectClasses = false;
				printUsage();
			}
		}
		if (expectClasses && testsToRun.size() == 0) {
			System.out.println("No test classes specified");
			printUsage();
		}
		return testsToRun;
	}

	private void printUsage() {
		System.out.println("Usage: RefactoringTestPlugin.MainRunner [-list] [-runall] [-[-]h[elp]] TestClass [TestClass ...]");
	}

	private void printSuite() {
		for (RefactoringTest test : suite()) {
			System.out.println(
					test.getClass().getName().replace("refactoringtestplugin.", "")/* + 
					"\n\t" + test.getDescription()*/);
		}
	}

	private RefactoringTest instantiateTestObject(String testClassName) {
		final String rootPackageName = "refactoringtestplugin"; 		
		if (!testClassName.startsWith(rootPackageName)) {
			testClassName = rootPackageName + "." + testClassName;
		}
		
		try {
			return (RefactoringTest)Class.forName(testClassName).newInstance();
		} 
		catch (ClassNotFoundException e1) {
			// ignore. probably wrong argument
		} 
		catch (Exception e) {
			e.printStackTrace();
		} 
		
		return null;
	}
	
	public static class NullAdvisor extends WorkbenchAdvisor {
		@Override
		public String getInitialWindowPerspectiveId() {
			return null;
		}
	}
}
